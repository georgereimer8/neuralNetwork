using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

//https://jamesmccaffrey.wordpress.com/2013/11/23/reading-the-mnist-data-set-with-c/

namespace MnistViewer
{
    public partial class Form1 : Form
    {

        public Form1()
        {
            InitializeComponent();
        }

        //public FileStream ifsLabels;
        //public FileStream ifsImages;
        //MnistImageReader MnistImageReader = new MnistImageReader();

        public Action<string> SetIfsLabelsPath;
        private void button1_Click(object sender, EventArgs e)
        {
            openFileDialog1.InitialDirectory = @"C:\Users\GeorgeR\source\repos\handwriting\mnist";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                textBox_labelsPath.Text = openFileDialog1.FileName;
                SetIfsLabelsPath?.Invoke(openFileDialog1.FileName);
                //ifsLabels = new FileStream(openFileDialog1.FileName, FileMode.Open); // test labels
            }
        }

        public Action<string> SetIfsImagesPath;
        private void button2_Click(object sender, EventArgs e)
        {
            openFileDialog1.InitialDirectory = @"C:\Users\GeorgeR\source\repos\handwriting\mnist";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                textBox_imagesPath.Text = openFileDialog1.FileName;
                SetIfsImagesPath?.Invoke(openFileDialog1.FileName);
                // ifsImages = new FileStream(openFileDialog1.FileName, FileMode.Open); // test labels

            } 
        }

        public void DisplayImage( Bitmap b )
        {
            button1.SafeInvoke(() => 
            {
                zoomPicBox1.Image = b;
            });
        }

        public Action ReadImages;
        private void button_load_Click(object sender, EventArgs e)
        {
            ReadImages?.Invoke();
            //MnistImageReader.ReadImages(ifsImages, ifsLabels);
            //foreach (MnistImage m in MnistImageReader.imageList)
            //{
            //    zoomPicBox1.Image = m.Bitmap;
            //}
        }

        public Action CreateNetwork;
        private void button_createNetwork_Click(object sender, EventArgs e)
        {
            CreateNetwork?.Invoke();
        }

        public Action TrainNetwork;
        private void button_trainNetwork_Click(object sender, EventArgs e)
        {
            TrainNetwork?.Invoke();
        }

        public Action<int> Epochs;
        private void numericUpDown_epochs_ValueChanged(object sender, EventArgs e)
        {
            var n = sender as NumericUpDown;
            Epochs?.Invoke((int)n.Value);
        }

        public Action<int> BatchSize;

        private void numericUpDown_batchSize_ValueChanged(object sender, EventArgs e)
        {
            var n = sender as NumericUpDown;
            BatchSize?.Invoke((int)n.Value);
        }

        public Action<double> ETA;
        private void numericUpDown_eta_ValueChanged(object sender, EventArgs e)
        {
            var n = sender as NumericUpDown;
            ETA?.Invoke((double)n.Value);
        }

        public Action<bool> IncludeTestData;
        private void checkBox_IncludeTestData_CheckedChanged(object sender, EventArgs e)
        {
            var c = sender as CheckBox;
            IncludeTestData?.Invoke(c.Checked);
        }

        public void Init( int epochs, int batchSize, double eta, bool includeTestData)
        {
            numericUpDown_epochs.Value = epochs;
            numericUpDown_batchSize.Value = batchSize;
            numericUpDown_eta.Value = (decimal)eta;
            checkBox_IncludeTestData.Checked = includeTestData;
        }
    }
}
